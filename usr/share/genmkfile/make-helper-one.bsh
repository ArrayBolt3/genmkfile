#!/bin/bash

## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## genmkfile - make-helper-bsh - version 1.7

## This is a copy.
## master location:
## https://github.com/Whonix/genmkfile/blob/master/usr/bin/genmkfile

#set -x

if [ "$GENMKFILE_DEBUG" = "1" ]; then
   set -x
fi

make_init() {
   ## For manual invocation.
   ## Should be set by makefile already.
   [ -n "$GENMKFILE_PATH" ] || GENMKFILE_PATH="/usr/share/genmkfile"
   export GENMKFILE_PATH

   ## No longer in use.
   #pushd "$GENMKFILE_ROOT_DIR" >/dev/null

   make_function_run make_get_distdir
   make_function_run make_get_destdir
   make_function_run make_get_variables
}

make_deinit() {
   ## No longer in use.
   #popd >/dev/null
   true
}

make_parse_cmd() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   local matched="false"
   local deb

   while :
   do
       case $1 in
           help)
               matched="true"
               make_function_run make_help
               exit 0
               shift
               ;;
           all)
               matched="true"
               make_function_run make_all "$@"
               exit 0
               shift
               ;;
           dist)
               matched="true"
               make_function_run make_dist
               exit 0
               shift
               ;;
           test)
               matched="true"
               make_function_run make_test
               exit 0
               shift
               ;;
           undist)
               matched="true"
               make_function_run make_undist
               exit 0
               shift
               ;;
           debdist)
               matched="true"
               make_function_run make_debdist
               exit 0
               shift
               ;;
           undebdist)
               matched="true"
               make_function_run make_undebdist
               exit 0
               shift
               ;;
           debdsc)
               matched="true"
               make_function_run make_debdsc
               exit 0
               shift
               ;;
           undebdsc)
               matched="true"
               make_function_run make_undebdsc
               exit 0
               shift
               ;;
           debinstfile)
               matched="true"
               make_function_run make_debinstfile
               exit 0
               shift
               ;;
           manpages)
               matched="true"
               make_function_run make_manpages
               exit 0
               shift
               ;;
           uch)
               matched="true"
               make_function_run make_uch
               exit 0
               shift
               ;;
           install)
               matched="true"
               make_function_run make_install
               exit 0
               shift
               ;;
           deb-build-dep)
               matched="true"
               make_function_run make_deb-build-dep
               exit 0
               shift
               ;;
           deb-run-dep)
               matched="true"
               make_function_run make_deb-run-dep
               exit 0
               shift
               ;;
           deb-all-dep)
               matched="true"
               make_function_run make_deb-all-dep
               exit 0
               shift
               ;;
           deb-pkg-build)
               matched="true"
               make_function_run make_deb-pkg-build
               exit 0
               shift
               ;;
           deb-install)
               matched="true"
               make_function_run make_deb-install
               exit 0
               shift
               ;;
           deb-remove)
               matched="true"
               make_function_run make_deb-remove
               exit 0
               shift
               ;;
           deb-purge)
               matched="true"
               make_function_run make_deb-purge
               exit 0
               shift
               ;;
           deb-clean)
               matched="true"
               make_function_run make_deb-clean
               shift
               ;;
           deb-cleanup)
               matched="true"
               make_function_run make_deb-cleanup
               shift
               ;;
           lintian)
               matched="true"
               make_function_run make_lintian
               shift
               ;;
           dput-ubuntu-ppa)
               matched="true"
               make_function_run make_dput-ubuntu-ppa
               shift
               ;;
           clean)
               matched="true"
               make_function_run make_clean
               exit 0
               shift
               ;;
           distclean)
               matched="true"
               make_function_run make_distclean
               exit 0
               shift
               ;;
           checkout)
               matched="true"
               make_function_run make_checkout
               exit 0
               shift
               ;;
           installcheck)
               matched="true"
               make_function_run make_installcheck
               exit 0
               shift
               ;;
           installsim)
               matched="true"
               make_function_run make_installsim
               exit 0
               shift
               ;;
           uninstallcheck)
               matched="true"
               make_function_run make_uninstallcheck
               exit 0
               shift
               ;;
           uninstall)
               matched="true"
               make_function_run make_uninstall
               exit 0
               shift
               ;;
           uninstallsim)
               matched="true"
               make_function_run make_uninstallsim
               exit 0
               shift
               ;;
           deb-chl-bumpup-major)
               matched="true"
               make_function_run make_deb-chl-bumpup-major
               exit 0
               shift
               ;;
           deb-chl-bumpup-manual)
               matched="true"
               make_function_run make_deb-chl-bumpup-manual
               exit 0
               shift
               ;;
           deb-uachl-bumpup-major)
               matched="true"
               make_function_run make_deb-uachl-bumpup-major
               exit 0
               shift
               ;;
           deb-uachl-bumpup-manual)
               matched="true"
               make_function_run make_deb-uachl-bumpup-manual
               exit 0
               shift
               ;;
           git-tag-show)
               matched="true"
               make_function_run make_git_tag_show
               exit 0
               shift
               ;;
           git-tag-sign)
               matched="true"
               make_function_run make_git_tag_sign
               exit 0
               shift
               ;;
           git-tag-verify)
               matched="true"
               make_function_run make_git_tag_verify
               exit 0
               shift
               ;;
           git-tag-check)
               matched="true"
               make_function_run make_git_tag_check
               exit 0
               shift
               ;;
           git-commit-verify)
               matched="true"
               make_function_run make_git_commit_verify_current
               exit 0
               shift
               ;;
           git-verify)
               matched="true"
               make_function_run make_git_verify
               exit 0
               shift
               ;;
           git-tag-push)
               matched="true"
               make_function_run make_git_tag_push
               exit 0
               shift
               ;;
           git-tag-show-latest)
               matched="true"
               make_function_run make_git_tag_show_latest
               exit 0
               shift
               ;;
           git-tag-push-latest)
               matched="true"
               make_function_run make_git_tag_push_latest
               exit 0
               shift
               ;;
           reprepro-add)
               matched="true"
               make_function_run make_reprepro-add
               exit 0
               shift
               ;;
           reprepro-remove)
               matched="true"
               make_function_run make_reprepro-remove
               exit 0
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$0: ${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') unknown option: $1" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.

   local args
   args="$@"

   if [ "$args" = "" ]; then
      make_function_run make_all
      return 0
   fi

   if [ ! "$matched" = "true" ]; then
      make_function_run "$@"
   fi
}

make_dependencies_filter_helper() {
   temp="$@"
   for to_remove in '${shlibs:Depends}' '${misc:Depends}' '${python:Depends}' '|' ; do
      temp="${temp//"$to_remove"/""}"
   done
   echo "$temp"
}

make_get_variables() {
   [ -n "$make_folder_list_for_un_and_install" ] || make_folder_list_for_un_and_install="bin boot dev etc home lib opt sbin srv sys usr var"

   my_user_id="$(id -u)"
   if [ "$my_user_id" = "0" ]; then
      running_as_root_maybe="Running as ${under}root${eunder}. ($my_user_id)"
   else
      running_as_root_maybe="Running as ${under}user${eunder}. ($my_user_id)"
   fi

   ## Deterministic.
   LC_ALL=C.UTF-8
   TZ=UTC
   export LC_ALL TZ

   ## XXX: maybe better set dynamically but would that be deterministic?
   [ -n "$XZ_OPT" ] || XZ_OPT="--threads=8"
   export XZ_OPT

   local temp dpkg_line
   if ! command -v dpkg-parsechangelog >/dev/null ; then
      true 'dpkg-parsechangelog not found. Do you have the "build-essential" package installed?
To install all dependencies, try running:
sudo genmkfile deb-all-dep
'
      exit 1
   fi

   ## sets: architecture_of_source_package
   ## sets: make_debian_control_file_relative_path
   ## sets: make_debian_control_file_absolute_path
   ## sets: dpkg_print_architecture
   source "$GENMKFILE_PATH/shared.bsh"
   make_shared_function

   make_debian_changelog_file_relative_path="debian/changelog"
   make_debian_changelog_file_absolute_path="$(realpath "$make_debian_changelog_file_relative_path")"
   test -f "$make_debian_changelog_file_absolute_path"

   ## Thanks to jakob for the perl lines.
   ## http://unix.stackexchange.com/users/20977/jakob
   ## http://unix.stackexchange.com/a/215919/49297

   make_deb_build_dependencies="$(perl -ne 'next if /^#/; $p=(s/^Build-Depends:\s*/ / or (/^ / and $p)); s/,|\n|\([^)]+\)//mg; print if $p' < "$make_debian_control_file_absolute_path")"
   make_deb_build_dependencies="$(make_dependencies_filter_helper "$make_deb_build_dependencies")"

   make_deb_build_dependencies=${make_deb_build_dependencies//"[linux-any]"}
   make_deb_build_dependencies=${make_deb_build_dependencies//"[all]"}

   make_deb_runtime_dependencies="$(perl -ne 'next if /^#/; $p=(s/^Depends:\s*/ / or (/^ / and $p)); s/,|\n|\([^)]+\)//mg; print if $p' < "$make_debian_control_file_absolute_path")"
   make_deb_runtime_dependencies="$(make_dependencies_filter_helper "$make_deb_runtime_dependencies")"

   while read -r -d $'\n' dpkg_line; do
      ## Example dpkg_line:
      ## Version: 0.1-1
      read -r first second _ <<< "$dpkg_line"
      ## Example first:
      ## Version:
      ## Example second:
      ## 3:0.1-1
      first="${first,,}"
      ## Example first:
      ## version
      if [ "$first" = "version:" ]; then
         make_changelog_version="$second"
         ## Example make_changelog_version:
         ## 3:0.1-1
         ## 0.1-1
         make_pkg_revision="${make_changelog_version#*-}"
         ## Example make_pkg_revision:
         ## 1
         temp="${make_changelog_version%-*}"
         ## Example temp:
         ## 3:0.1
         make_pkg_version="${temp#*:}"
         ## Example make_pkg_version:
         ## 0.1
         if echo "$make_changelog_version" | grep --quiet ":" ; then
            make_epoch="${temp%:*}"
         else
            make_epoch=""
         fi
         ## Example make_epoch:
         ## 3
         break
      fi
   done < <( dpkg-parsechangelog )

   make_pkg_version_with_revision="${make_pkg_version}-${make_pkg_revision}"
   if [ "$make_pkg_version" = "" ]; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') variable make_pkg_version is empty."
      exit 1
   fi

   [ -n "$host_architecture" ] || host_architecture="$dpkg_print_architecture"
   [ -n "$target_architecture" ] || target_architecture="$dpkg_print_architecture"

   if [ "$binary_package_architecture" = "" ]; then
      if [ "$architecture_of_source_package" = "all" ]; then
         ## binary_package_architecture=all
         binary_package_architecture="$architecture_of_source_package"
      else
         binary_package_architecture="$target_architecture"
      fi
   fi

   local grep_line a package

   grep_line="$(grep "Source:" "$make_debian_control_file_absolute_path")"
   read -r a package _ <<< "$grep_line"
   make_source_package_name="$package"
   ## Source package name may or may not match binary package name.
   make_package_list="$make_source_package_name"
   make_package_debs_files_list=""

   make_debian_install_file_relative_path="debian/${make_source_package_name}.install"

   ## Example grep_output:
   ## Package: non-qubes-vm-enhancements-cli

   while read -r -d $'\n' grep_line; do
      read -r a package _ <<< "$grep_line"
      ## Example architecture independent "all" package: anon-apt-sources-list_3.4-1_all.deb
      temp="${package}_${make_pkg_version}-${make_pkg_revision}_${binary_package_architecture}.deb"
      temp="${DISTDIR}/$temp"
      make_package_debs_files_list="$make_package_debs_files_list $temp"
      if [ "$package" = "$make_source_package_name" ]; then
         continue
      fi
      make_package_list="$make_package_list $package"
   done < <( grep "Package:" "$make_debian_control_file_absolute_path" )

   true "make_package_list: $make_package_list"
   true "make_package_debs_files_list: $make_package_debs_files_list"

   make_main_deb_file_name="${package}_${make_pkg_version}-${make_pkg_revision}_${binary_package_architecture}.deb"
   make_main_deb_file="${DISTDIR}/$make_main_deb_file_name"

   make_main_dsc_file_name="${make_source_package_name}_${make_pkg_version}-${make_pkg_revision}.dsc"

   ## Changes file contains target_architecture such as 'amd64', not 'all'.
   ## Example changes file for architecture independent package:
   ## anon-apt-sources-list_3.4-1_amd64.changes
   if [ "$make_use_cowbuilder" = "true" ]; then
      make_main_dsc_file="$DISTDIR/$make_main_dsc_file_name"
      make_main_changes_file="$DISTDIR/${make_source_package_name}_${make_pkg_version}-${make_pkg_revision}_${target_architecture}.changes"
   else
      make_main_dsc_file="${DISTDIR}/$make_main_dsc_file_name"
      make_main_changes_file="${DISTDIR}/${make_source_package_name}_${make_pkg_version}-${make_pkg_revision}_${target_architecture}.changes"
   fi

   make_debian_tarball_file_name="${make_source_package_name}_${make_pkg_version}-${make_pkg_revision}.debian.tar.xz"
   make_debian_tarball="${DISTDIR}/$make_debian_tarball_file_name"
   if [ "$make_debdist_tolower" = "false" ]; then
      true
   else
      make_debian_tarball_file_name="${make_debian_tarball_file_name,,}"
      make_debian_tarball="${make_debian_tarball,,}"
   fi
   make_debian_tarball_absolute_path="$(realpath "$make_debian_tarball")"

   make_upstream_tarball_relative_path_file_name="${make_source_package_name}_${make_pkg_version}.orig.tar.xz"
   make_upstream_tarball_relative_path="${DISTDIR}/$make_upstream_tarball_relative_path_file_name"
   if [ "$make_upstream_tarball_relative_path_tolower" = "false" ]; then
      true
   else
      make_upstream_tarball_relative_path_file_name="${make_upstream_tarball_relative_path_file_name,,}"
      make_upstream_tarball_relative_path="${make_upstream_tarball_relative_path,,}"
   fi
   make_upstream_tarball_real_path="$(realpath "$make_upstream_tarball_relative_path")"

   make_upstream_tarball_source_folder_name="${make_source_package_name}-${make_pkg_version}"
}

make_get_destdir() {
   if [ "$DESTDIR" = "" ]; then
      DESTDIR="/"
   fi
   if type -t make_hook_at_the_end_of_get_destdir ; then
      make_hook_at_the_end_of_get_destdir
   fi
}

make_get_distdir() {
   if [ "$DISTDIR" = "" ]; then
      DISTDIR=".."
   fi

   if [ "$make_use_cowbuilder" = "true" ]; then
      if [ "$make_cowbuilder_dist_folder" = "" ]; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') make_use_cowbuilder=$make_use_cowbuilder, so environment variable make_cowbuilder_dist_folder needs to be set! For example:"
         echo "make_use_cowbuilder=$make_use_cowbuilder make_cowbuilder_dist_folder=~/genmkfile-packages-result"
         exit 1
      else
         DISTDIR="$make_cowbuilder_dist_folder"
      fi

      if ! test -d "$make_cowbuilder_dist_folder" ; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') make_cowbuilder_dist_folder $make_cowbuilder_dist_folder does not exist! Run:
mkdir -p $make_cowbuilder_dist_folder"
         exit 1
      fi
   fi

   if ! test -d "$DISTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DISTDIR '$DISTDIR' does not exist!"
      exit 1
   fi
   if ! test -w "$DISTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DISTDIR '$DISTDIR' is not writeable!"
      exit 1
   fi
}

make_help() {
   set +x
   echo "\
genmkfile help
   Show this help.
genmkfile dist
   Create package-version.tar.xz from source files in \$DISTDIR (default \"..\").
genmkfile undist
   Delete package-version.tar.xz from source files in \$DISTDIR (default \"..\").
genmkfile debdist
   Create debian.tar.xz from source files in \$DISTDIR (default \"..\").
genmkfile undebdist
   Delete debian.tar.xz from source files in \$DISTDIR (default \"..\").
genmkfile debdsc
   Create dsc file \$DISTDIR (default \"..\").
genmkfile undebdsc
   Deletes dsc file \$DISTDIR (default \"..\").
genmkfile debinstfile
   Creates files debian/pkg-name.install.
genmkfile manpages
   Create man page from man source folder, which will be stored in auto-generated-man-pages folder.
genmkfile uch
   Store upstream changelog from git log in changelog.upstream.
genmkfile install
   Copying the files from the source tree to system-wide directories.
genmkfile installsim
   Simulate copying the files from the source tree to system-wide directories.
genmkfile deb-build-dep
   Install build dependencies listed in debian/control under Build-Depends using apt-get.
   Various environment variables supported.
genmkfile deb-run-dep
   Install runtime dependencies listed in debian/control under Depends using apt-get.
   Various environment variables supported.
genmkfile deb-all-dep
   Combination of deb-build-dep and deb-build-dep.
genmkfile deb-pkg-build
   Create a deb, which will be stored in parent folder.
genmkfile deb-install
   Install deb from parent folder.
genmkfile deb-icup
   Combination of genmkfile deb-cleanup, deb-pkg-build, genmkfile deb-pkg-install and genmkfile deb-pkg-cleanup.
   icup stands for install and cleanup.
genmkfile deb-remove
   apt-get remove make_source_package_name
genmkfile deb-purge
   apt-get purge make_source_package_name
genmkfile deb-clean
   Delete temporary debhelper files.
genmkfile deb-cleanup
   Same as genmkfile deb-clean and deletes debuild artifacts from parent folder.
genmkfile dput-ubuntu-ppa
   Upload to Ubuntu ppa. Requires functional .dput.cf.
genmkfile distclean
   Currently same as genmkfile clean.
genmkfile checkout
   Fetch from git.
genmkfile installcheck
   Check if source files match installed files.
genmkfile uninstallcheck
   Check if genmkfile uninstall removed all files.
genmkfile uninstall
   Delete all installed files.
genmkfile uninstallsim
   Simulate what genmkfile uninstall would do.
genmkfile deb-chl-bumpup-manual
   Manual upstream version number in debian/changelog.
genmkfile deb-uachl-bumpup-manual
   Combination of genmkfile uch and genmkfile deb-chl-bumpup.
genmkfile deb-chl-bumpup-major
   Major bump upstream version number in debian/changelog.
genmkfile deb-uachl-bumpup-major
   Combination of genmkfile uch and genmkfile deb-chl-bumpup.
genmkfile git-tag-show
   echo the current git tag to stdout.
genmkfile git-tag-sign
   git tag (-s) sign latest pkg_version_with_revision from debian/changelog. Only a repository sanity check. Not for security purposes!
genmkfile git-tag-verify
   git tag (-v) verify latest pkg_version_with_revision from debian/changelog. Only a repository sanity check. Not for security purposes!
genmkfile git-tag-check
   Check if current git tag is a signed git tag. Only a repository sanity check. Not for security purposes!
genmkfile git-commit-verify
   Check if current git head is a signed git commit. Only a repository sanity check. Not for security purposes!
genmkfile git-verify
   Combination of tag-check and commit-verify. Only a repository sanity check. Not for security purposes!
genmkfile git-tag-push
   git push latest pkg_version_with_revision from debian/changelog. (Environment variable make_git_tag_push_targets, that defaults to 'origin'.)
genmkfile git-tag-show-latest
   echo recent git tag to stdout.
genmkfile git-tag-push-latest
   git push most recent git tag. (Environment variable make_git_tag_push_targets, that defaults to 'origin'.)
genmkfile reprepro-add
   Add main deb package using reprepro wrapper (Environment variable make_reprepro_wrapper, that default to 'reprepro'.)
   to repository (Environment variable make_reprepro_codename, that defaults to 'local'.).
genmkfile reprepro-remove
   Delete."
}

make_all() {
   if [ -f "$PWD/Makefile_orig" ]; then
      make -f "$PWD/Makefile_orig" all "$@"
   fi
}

make_dist() {
   #find "." -not -iwholename '*.git*' -exec touch --no-dereference --date="Wed Sep 30 16:30:05 UTC 2015" {} +

   ## No longer using --transform because that does not work with symlinks.
   ## (Important for 'corridor' package.)

   if ! test -d "$DISTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DISTDIR '$DISTDIR' does not exist!"
      exit 1
   fi
   if ! test -w "$DISTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DISTDIR '$DISTDIR' is not writeable!"
      exit 1
   fi

   ## Debugging.
   pwd="$(pwd)"
   test -w "$(pwd)"
   touch "$make_upstream_tarball_real_path"
   test -w "$make_upstream_tarball_real_path"
   rm -f "$make_upstream_tarball_real_path"

   echo "DEBUG manual reproduction:
cd $(pwd)"

   ## Excluding '/debian' folder from upstream tarball to avoid lintian warning
   ## 'no-debian-changes'.

   echo "DEBUG manual reproduction:
find \
      '.' \
      -not -path '*/\.git/*' \
      -not -path '*/\.git' \
      -not -name '.gitignore' \
      -not -path './debian*' \
      -print0 \
         | tar \
            --null \
            --no-recursion \
            --create \
            --owner=0 --group=0 --numeric-owner \
            --mode=go=rX,u+rw,a-s \
            --sort=name \
            --mtime='2015-10-21 00:00Z' \
            --xz \
            --file='$make_upstream_tarball_real_path' \
            -T \
            -
   "

   find \
      '.' \
      -not -path '*/\.git/*' \
      -not -path '*/\.git' \
      -not -name '.gitignore' \
      -not -path './debian*' \
      -print0 \
         | tar \
            --null \
            --no-recursion \
            --create \
            --owner=0 --group=0 --numeric-owner \
            --mode=go=rX,u+rw,a-s \
            --sort=name \
            --mtime='2015-10-21 00:00Z' \
            --xz \
            --file="$make_upstream_tarball_real_path" \
            -T \
            -

   strip-nondeterminism "$make_upstream_tarball_real_path"

   test -f "$make_upstream_tarball_real_path"
}

make_debdist() {
   #find "." -not -iwholename '*.git*' -exec touch --no-dereference --date="Wed Sep 30 16:30:05 UTC 2015" {} +

   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=657401
   ## Not using `dpkg-source` since that does not support any other output dir than '../'.

   find \
      debian \
      -print0 \
         | tar \
            --null \
            --no-recursion \
            --create \
            --owner=0 --group=0 --numeric-owner \
            --mode=go=rX,u+rw,a-s \
            --sort=name \
            --mtime='2015-10-21 00:00Z' \
            --xz \
            --file="$make_debian_tarball_absolute_path" \
            -T \
            -

   strip-nondeterminism "$make_debian_tarball_absolute_path"

   test -f "$make_debian_tarball_absolute_path"
}

make_undist() {
   rm --force "$make_upstream_tarball_relative_path"
}

make_debdsc() {
   if ! test -d "$DISTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DISTDIR '$DISTDIR' does not exist!"
      exit 1
   fi
   if ! test -w "$DISTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DISTDIR '$DISTDIR' is not writeable!"
      exit 1
   fi

   pushd "$DISTDIR" >/dev/null

   ## Creates make_main_dsc_file.
   dpkg-source \
      -c"$make_debian_control_file_absolute_path" \
      -l"$make_debian_changelog_file_absolute_path" \
      --format="3.0 (custom)" \
      --target-format="3.0 (quilt)" \
      -b / \
      "$make_upstream_tarball_real_path" \
      "$make_debian_tarball_absolute_path"

   popd >/dev/null

   test -f "$make_main_dsc_file"
}

make_undebdsc() {
   rm --force "$make_main_dsc_file"
}

make_undebdist() {
   rm --force "$make_debian_tarball_absolute_path"
}

make_debinstfile() {
   local line d missing

   if ! test -f "$make_debian_install_file_relative_path" ; then
      make_debinstfile_create
      return 0
   fi

   if cat "$make_debian_install_file_relative_path" | grep -q nogenmkfile ; then
      return 0
   fi

   for d in $make_folder_list_for_un_and_install; do
      if [ ! -d "$d" ]; then
         continue
      fi
      missing=yes
      while read -r -d $'\n' line; do
         if [ "$line" = "${d}/*" ]; then
            missing=no
            break
         fi
      done < "$make_debian_install_file_relative_path"
      if [ "$missing" = "yes" ]; then
         break
      fi
   done

   if [ "$missing" = "yes" ]; then
      make_debinstfile_create
   fi
}

make_debinstfile_create() {
   rm -f "$make_debian_install_file_relative_path"

   echo "\
## Copyright (C) 2020 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## This file was generated using 'genmkfile debinstfile'.
" | tee -a "$make_debian_install_file_relative_path" >/dev/null

   local d
   for d in $make_folder_list_for_un_and_install; do
      if [ -d "$d" ]; then
         echo "${d}/*" | tee -a "$make_debian_install_file_relative_path" >/dev/null
      fi
   done
}

make_test() {
   ## Automatically run by debhelper. To prevent debhelper from failing,
   ## implemented a dummy function here.
   echo "${green}INFO:${reset} $FUNCNAME not implemented"
}

make_manpages() {
   shopt -s globstar dotglob nullglob
   local i source_folder filename_without_ronn_file_extension base_name
   for i in "$PWD/man/"*".ronn"; do
      if [ -d "$i" ]; then
         continue
      fi

      base_name="${i##*/}"
      filename_without_ronn_file_extension="${base_name%.*}"

      mkdir --parents "$PWD/auto-generated-man-pages/$source_folder"

      true "${bold}${cyan}${green}INFO:${reset} Creating man page $PWD/auto-generated-man-pages/$filename_without_ronn_file_extension ${reset}"

      ## '--date=2020-01-01' for deterministic man pages.
      ronn \
         --date=2020-01-01 \
         --manual="$make_source_package_name Manual" \
         --organization="$make_source_package_name" \
         < "$i" \
         > "$PWD/auto-generated-man-pages/$filename_without_ronn_file_extension"

   done
   shopt -u globstar dotglob nullglob
}

make_uch() {
   git log > "$PWD/changelog.upstream"
   test -f "$PWD/changelog.upstream"
}

make_distclean() {
   echo "$0: ${green}INFO:${reset} (internal) genmkfile distclean"
   make_clean
}

make_clean() {
   if [ -f "$PWD/Makefile_orig" ]; then
      make -f "$PWD/Makefile_orig" clean
   else
      if make --dry-run clean &>/dev/null ; then
         echo "$0: ${green}INFO:${reset} (internal) make clean"
         make clean
      else
         echo "$0: ${green}INFO:${reset} no target 'make clean', ok."
      fi
   fi
}

make_deb-shared-dep() {
   echo "sudo \
      apt-get \
         ${APTGETOPT[@]} \
         --yes \
         --no-install-recommends \
         install \
         $make_deb_shared_dependencies"

   local apt_get_exit_code="0"
   sudo \
      apt-get \
         ${APTGETOPT[@]} \
         --yes \
         --no-install-recommends \
         install \
         $make_deb_shared_dependencies \
         || { apt_get_exit_code="$?" ; true; };

   exit "$apt_get_exit_code"
}

make_deb-build-dep() {
   make_deb_shared_dependencies="$make_deb_build_dependencies"
   make_function_run make_deb-shared-dep
}

make_deb-run-dep() {
   make_deb_shared_dependencies="$make_deb_runtime_dependencies"
   make_function_run make_deb-shared-dep
}

make_deb-all-dep() {
   make_deb_shared_dependencies="$make_deb_build_dependencies $make_deb_runtime_dependencies"
   make_function_run make_deb-shared-dep
}


make_dpkg_source_verification_sanity_test_help_message() {
   echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') dpkg-source verification failed!

Does your key exist in file '~/.gnupg/trustedkeys.gpg'?

To add you could use for example:

gpg --no-default-keyring --keyring trustedkeys.gpg --import ~/Whonix/packages/repository-dist/usr/share/repository-dist/derivative-distribution-signing-key.asc
"
}

make_deb-pkg-build_shared() {
   if [ "$make_use_cowbuilder" = "true" ]; then
      if ! test -f "$make_upstream_tarball_real_path" ; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') upstream tarball $make_upstream_tarball_real_path does not exist.
Did you run
genmkfile dist && genmkfile debdist && genmkfile debdsc
beforehand?
"
         exit 1
      fi

      if ! test -f "$make_debian_tarball_absolute_path" ; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') debian tarball $make_debian_tarball_absolute_path does not exist.
Did you run
genmkfile dist && genmkfile debdist && genmkfile debdsc
beforehand?
"
         exit 1
      fi

      if ! test -f "$make_main_dsc_file" ; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') dsc file $make_main_dsc_file does not exist.
Did you run
genmkfile dist && genmkfile debdist && genmkfile debdsc
beforehand?
"
         exit 1
      fi

      true "COWBUILDER_PREFIX: $COWBUILDER_PREFIX"

      if [ ! "$whonix_build_apt_stable_release" = "" ]; then
         [ -n "$make_cowbuilder_distribution" ] || make_cowbuilder_distribution="$whonix_build_apt_stable_release"
      else
         [ -n "$make_cowbuilder_distribution" ] || make_cowbuilder_distribution="$(lsb_release --short --codename)"
      fi

      ## Whonix build script sets variable `make_cowbuilder_mirror`.

      if [ ! "$whonix_build_apt_sources_mirror" = "" ]; then
         [ -n "$make_cowbuilder_mirror" ] || make_cowbuilder_mirror="$whonix_build_apt_sources_mirror"
      else
         ## apt-cacher-ng support
         if [ "$REPO_PROXY" = "http://127.0.0.1:3142" ]; then
            [ -n "$make_cowbuilder_mirror" ] || make_cowbuilder_mirror="http://HTTPS///deb.debian.org/debian"
         fi
         if [ "$REPO_PROXY" = "http://127.0.0.1:3142/" ]; then
            [ -n "$make_cowbuilder_mirror" ] || make_cowbuilder_mirror="http://HTTPS///deb.debian.org/debian"
         fi
         [ -n "$make_cowbuilder_mirror" ] || make_cowbuilder_mirror="https://deb.debian.org/debian"
      fi

      ## TODO: change that folder
      cow_folder="/var/cache/pbuilder/cow.cow_${target_architecture}"
      base_folder="/var/cache/pbuilder/base.cow_${target_architecture}"

      if [ ! "$whonix_build_pbuilder_config_file" = "" ]; then
         make_cowbuilder_config_file_arg="--configfile $whonix_build_pbuilder_config_file"
      fi

      ## Using cowbuilder with
      ## --host-arch "$host_architecture" \
      ## --architecture "$BUILD_TARGET_ARCH" \
      ## can cause the following build error:
      ## The following packages have unmet dependencies:
      ## builddeps:/build/anon-apps-config_3.0-1.dsc:amd64 : Depends: genmkfile:amd64 but it is not installable
      ##
      ## Test command:
      ## whonix_build_pbuilder_config_file=/home/user/whonix_binary/pbuilder.conf make_cross_build_platform_list=arm64 make_cowbuilder_dist_folder=~/genmkfile-packages-result make_use_cowbuilder=true genmkfile deb-pkg

      ## COWBUILDER_PREFIX could set variables such as http_proxy.
      ## Whonix build script sets:
      ## COWBUILDER_PREFIX+=" env http_proxy=${REPO_PROXY}"
      ## which results in:
      ## sudo env http_proxy=http://127.0.0.1:3142 cowbuilder [...]
      ##
      ## creates $make_main_changes_file
      ##
      ## creates again (overwrites) $make_debian_tarball_file_name
      ##
      ## Forces the inclusion of the original source.
      ## --debbuildopts="-sa" is passed by cowbuilder to pdebuild (which passes
      ## it to debuild?) which passes it to dpkg-genchanges. In other words,
      ## results in 'dpkg-genchanges -sa'.
      ## That is required when make_pkg_revision is higher than 1. In that case
      ## by default the original source tarball would not be included by Debian
      ## default. The practice in Debian is not to upload the original source
      ## tarball if only the Debian package revision version number was
      ## increased since it would already be in the archive. That however seems
      ## incompatible with reprepro, which would show the following error:
      ## ##
      ## Unable to find pool/main/l/lkrg/lkrg_0.9.1.orig.tar.xz needed by lkrg_0.9.1-3.dsc!
      ## Perhaps you forgot to give dpkg-buildpackage the '-sa' option,
      ## or you could try --ignore=missingfile to guess possible files to use.
      ## There have been errors!
      ## ##
      ## Maybe non-ideal. '--debbuildopts="-sa" would only be required' if
      ## package revision number is higher than 1 and maybe only if there never
      ## has been package revision number 1 including upstream source tarball
      ## uploaded beforehand. Good enough.
      sudo \
         $COWBUILDER_PREFIX \
            cowbuilder \
               --debbuildopts="-sa" \
               --architecture "$target_architecture" \
               $make_cowbuilder_config_file_arg \
               --build "$make_main_dsc_file" \
               --basepath "$base_folder" \
               --buildplace "$cow_folder" \
               --distribution "$make_cowbuilder_distribution" \
               --mirror "$make_cowbuilder_mirror" \
               --extrapackages "$make_deb_build_dependencies" \
               --buildresult "$DISTDIR"

   else
      if ! command -v debuild >/dev/null ; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') debuild not found. Do you have the 'devscripts' package installed?
To install all dependencies, try running:
sudo genmkfile deb-all-dep
"
         exit 1
      fi

      if ! dpkg-checkbuilddeps ; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') dpkg-checkbuilddeps reported missing build dependencies.
To install all dependencies, try running:
sudo genmkfile deb-all-dep
"
         exit 1
      fi

      ## Using --no-lintian, because debuild does not exist with a non-zero exit
      ## code, should lintian find an error. Therefore running lintian afterwards.
      debuild \
         --no-lintian \
         -sa \
         $make_debuild_maybe_unsigned_opts \
         "$@"
   fi

   if [ "$make_use_debsign" = "true" ]; then
      ## clearsign's $make_main_changes_file
      debsign $make_debsign_opts "$make_main_changes_file"

      ## sanity test
      gpg --verify "$make_main_changes_file"

      local temp_dir
      temp_dir="$(mktemp --directory)"
      ## Required, otherwise:
      ## dpkg-source: error: unpack target exists: /tmp/tmp.n1V3KXmMtI
      rm --recursive --force "$temp_dir"

      ## Sanity test.
      dpkg-source \
         --require-strong-checksums \
         --require-valid-signature \
         -x \
         "$make_main_dsc_file" \
         "$temp_dir/" || \
            { make_dpkg_source_verification_sanity_test_help_message ; return 1; };

      rm --recursive --force "$temp_dir"
   fi

   for package in $make_package_debs_files_list; do
      test -f "$package"
      echo "$0: ${green}INFO:${reset} You can find your deb file here: ${bold}$package${reset}"
   done

   if [ "$make_use_lintian" = "false" ]; then
      echo "$0: ${green}INFO:${reset} make_use_lintian=false - skipping lintian."
   elif [ "$make_use_lintian" = "true" ]; then
      echo "$0: ${green}INFO:${reset} make_use_lintian=true - running lintian..."
      make_function_run make_lintian
   else
      echo "$0: ${green}INFO:${reset} make_use_lintian='' - Autodetecting if lintian is installed..."
      if command -v lintian &>/dev/null ; then
         echo "$0: ${green}INFO:${reset} lintian auto detected, using it..."
         make_function_run make_lintian
      else
         echo "$0: ${green}INFO:${reset} lintian not installed, skipping."
      fi
   fi
}

make_lintian_on_warning() {
   if [ "$make_use_lintian" = "true" ]; then
      echo "$0: ${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') lintian warning. Failing closed."
      if [ "$make_lintian_exit_code" = "0" ]; then
         exit 1
      else
         exit "$make_lintian_exit_code"
      fi
   else
      echo "$0: ${red}WARNING:${reset} lintian warning. Failing open."
   fi
}

make_lintian() {
   test -f "$make_main_changes_file"
   if [ "$DEBUILD_LINTIAN_OPTS" = "" ]; then
      ## TODO: Debian bullseye
      ## '--suppress-tags bad-whatis-entry' can maybe get removed.
      ## `man` `seccomp` workaround.
      ## See hardened_malloc debian/50hardened-malloc for more information.
      ## https://github.com/Whonix/hardened_malloc/blob/master/debian/50hardened-malloc
      ## https://forums.whonix.org/t/hardened-malloc-hardened-memory-allocator/7474/135
      ##
      ## https://github.com/openwall/lkrg/pull/105
      ## --suppress-tags systemd-service-file-missing-documentation-key
      ##
      ## Building from git. Not from tarball.
      ## https://forums.whonix.org/t/end-to-end-signed-debs-debsign-debsig-and-dpkg-sig/3446
      ## --suppress-tags orig-tarball-missing-upstream-signature
      export DEBUILD_LINTIAN_OPTS="\
         --suppress-tags missing-tests-control \
         --suppress-tags bad-whatis-entry \
         --suppress-tags systemd-service-file-missing-documentation-key \
         --suppress-tags orig-tarball-missing-upstream-signature \
         --suppress-tags package-supports-alternative-init-but-no-init.d-script \
         --quiet \
         --pedantic \
         --info \
         --display-info \
         "
   fi
   local make_lintian_exit_code="0"
   echo "lintian $genmkfile_lintian_pre_opts $DEBUILD_LINTIAN_OPTS $genmkfile_lintian_post_opts \"$make_main_changes_file\""
   lintian_output="$(lintian $genmkfile_lintian_pre_opts $DEBUILD_LINTIAN_OPTS $genmkfile_lintian_post_opts "$make_main_changes_file" 2>&1 || { make_lintian_exit_code="$?" ; true; };)"
   if [ ! "" = "$lintian_output" ]; then
      if ! test -o xtrace ; then
         echo "$0: ${green}INFO:${reset} lintian exit code: $make_lintian_exit_code"
         echo "$0: ${green}INFO:${reset} lintian output:"
         echo "################################################################################"
         echo "$lintian_output"
         echo "################################################################################"
      fi
      make_lintian_on_warning
   fi
   if [ ! "$make_lintian_exit_code" = "0" ] ; then
      make_lintian_on_warning
   else
      echo "$0: ${green}INFO:${reset} lintian ok."
   fi
}

make_deb-pkg-build() {
   make_debuild_maybe_unsigned_opts="-us -uc"
   make_function_run make_deb-pkg-build_shared "$@"
}

make_deb-install() {
   local package
   for package in $make_package_debs_files_list; do
      if [ ! -f "$package" ]; then
         echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') File $package does not exist. Have you run \"genmkfile deb-pkg-build\" already?"
         exit 1
      fi
      echo "sudo dpkg -i '$package'"
      sudo dpkg -i "$package"
   done
}

make_deb-remove() {
   sudo apt-get remove "$make_source_package_name"
}

make_deb-purge() {
   sudo apt-get purge "$make_source_package_name"
}

make_deb-clean() {
   if [ -d "debian/tmp" ]; then
      rm --recursive "debian/tmp"
   fi
   if [ -d "deb_dist" ]; then
      rm --recursive "deb_dist"
   fi
   if [ -d "debian/.debhelper" ]; then
      rm --recursive "debian/.debhelper"
   fi
   if [ -f "debian/autoreconf.after" ]; then
      rm "debian/autoreconf.after"
   fi
   if [ -f "debian/autoreconf.before" ]; then
      rm "debian/autoreconf.before"
   fi
   local to_delete package
   for package in $make_package_list; do
      if [ -d "debian/$package" ]; then
         rm --recursive "debian/$package"
      fi
      for to_delete in \
         "debian/$package.debhelper.log" \
         "debian/$package.substvars" \
         "debian/files" \
         "debian/$package.prerm.debhelper" \
         "debian/$package.preinst.debhelper" \
         "debian/$package.postinst.debhelper" \
         "debian/$package.postrm.debhelper" \
         "debian/$package.dkms.debhelper" \
         "debian/debhelper-build-stamp"
      do
         if [ -e "$to_delete" ]; then
            rm "$to_delete"
         fi
      done
   done
}

make_deb-cleanup() {
   make_function_run make_undist
   make_function_run make_undebdist
   make_function_run make_undebdsc
   make_function_run make_clean
   make_function_run make_deb-clean
   local to_delete package
   for package in $make_package_list; do
      for to_delete in \
         "${DISTDIR}/${package}_"*-*_*".deb" \
         "${DISTDIR}/${package}-dbgsym_"*-*_*".deb" \
         "${DISTDIR}/${package}_"*-*_*".buildinfo" \
         "${DISTDIR}/${package}_"*-*".debian.tar.xz" \
         "${DISTDIR}/${package}_"*-*".dsc" \
         "${DISTDIR}/${package}_"*-*_*".build" \
         "${DISTDIR}/${package}_"*-*_*".changes" \
         "${DISTDIR}/${package}_"*-*"_source.build" \
         "${DISTDIR}/${package}_"*-*"_source.changes" \
         "${DISTDIR}/${package}_"*-*"_source.${package}.upload"
      do
         if [ -e "$to_delete" ]; then
            rm "$to_delete"
         fi
      done
   done
   if [ -f "$make_upstream_tarball_relative_path" ]; then
      rm "$make_upstream_tarball_relative_path"
   fi
}

make_dput-ubuntu-ppa() {
   dput "$make_source_package_name" "${DISTDIR}/${make_source_package_name}_${make_pkg_version}-${make_pkg_revision}_source.changes"
}

make_checkout() {
   git fetch
}

make_helper() {
   shopt -s globstar dotglob nullglob
   local d source_file file_without_pwd file_with_destdir

   if ! test -d "$DESTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DESTDIR '$DESTDIR' does not exist!"
      exit 1
   fi
   if ! test -w "$DESTDIR" ; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') DESTDIR '$DESTDIR' is not writeable!"
      exit 1
   fi

   for d in $make_folder_list_for_un_and_install; do
      if [ -d "$d" ]; then
         for source_file in "$PWD/$d"/**; do
            if [ "$make_install_" = "true" ]; then
               if [ ! -d "$DESTDIR" ]; then
                  mkdir --parents "$DESTDIR"
               fi
               cp --recursive "$d" "$DESTDIR"
               break
            elif [ "$make_installsim_" = "true" ]; then
               if [ ! -d "$DESTDIR" ]; then
                  echo "${green}INFO:${reset} would do: mkdir --parents \"$DESTDIR\""
               else
                  echo "${green}INFO:${reset} No need to run, because folder already exists: mkdir --parents \"$DESTDIR\""
               fi
               echo "${green}INFO:${reset} would do: cp --recursive \"$d\" \"$DESTDIR\""
               break
            fi
            if [ ! -f "$source_file" ]; then
               continue
            fi
            file_without_pwd="${source_file#$PWD}"
            file_with_destdir="${DESTDIR}${file_without_pwd}"
            if [ "$make_uninstallcheck_" = "true" ]; then
               if [ -f "$file_with_destdir" ]; then
                  echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') file $file_with_destdir still installed."
                  local still_installed="true"
               fi
            elif [ "$make_installcheck_" = "true" ]; then
               diff "$source_file" "$file_with_destdir"
            elif [ "$make_uninstallsim_" = "true" ]; then
               if [ -f "$file_with_destdir" ]; then
                  echo "${green}INFO:${reset} would do: rm \"$file_with_destdir\""
               fi
            elif [ "$make_uninstall_" = "true" ]; then
               if [ -f "$file_with_destdir" ]; then
                  rm "$file_with_destdir"
               fi
            else
               echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') error 2 in $FUNCNAME!"
               exit 1
            fi
         done
      fi
   done
   shopt -u globstar dotglob nullglob
   if [ "$still_installed" = "true" ]; then
      exit 1
   fi
}

make_install() {
   make_install_="true"
   make_function_run make_helper
}

make_installcheck() {
   make_installcheck_="true"
   make_function_run make_helper
}

make_installsim() {
   make_installsim_="true"
   make_function_run make_helper
}

make_uninstallcheck() {
   make_uninstallcheck_="true"
   make_function_run make_helper
}

make_uninstall() {
   make_uninstall_="true"
   make_function_run make_helper
}

make_uninstallsim() {
   make_uninstallsim_="true"
   make_function_run make_helper
}

make_deb-chl-bumpup-major() {
   make_bump_type="major"
   make_function_run make_deb-chl-bumpup
}

make_deb-chl-bumpup-manual() {
   make_bump_type="manual"
   make_function_run make_deb-chl-bumpup
}

make_deb-chl-bumpup() {
   command -v debchange >/dev/null

   if [ "$DEBEMAIL" = "" ]; then
      ## Otherwise e-mail address in debian/changelog would default to
      ## user@host.localdomain and then lintian would complain and exit with
      ## failure code.
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') environment variable DEBEMAIL may not be empty! Both, DEBEMAIL and DEBFULLNAME need to be set!"
      exit 1
   fi
   if [ "$DEBFULLNAME" = "" ]; then
      echo "${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') environment variable DEBFULLNAME may not be empty! Both, DEBEMAIL and DEBFULLNAME need to be set!"
      exit 1
   fi

   local new_upstream_version_without_leading_zero new_upstream_version new_changelog_version new_revision

   if [ "$make_bump_type" = "major" ]; then
      true "make_pkg_version: $make_pkg_version"

      if [ "$version_numbers_by_upstream" = "true" ] ; then
         ## Thanks to:
         ## https://stackoverflow.com/a/4485581
         #new_upstream_version="$(echo "$make_pkg_version" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')"
         new_upstream_version="$make_pkg_version"
         new_revision="$(bc -l <<< "scale=9 ; $make_pkg_revision + 1" 2>&1)"
      else
         new_upstream_version_without_leading_zero="$(bc -l <<< "scale=9 ; $make_pkg_version + 0.1" 2>&1)"
         new_upstream_version="$(printf '%3.1f\n' "$new_upstream_version_without_leading_zero")"
         ## Packages by Kicksecure / Whonix always bump package version. Not Debian package revision.
         new_revision="1"
      fi

      if [ "$make_epoch" = "" ]; then
         new_changelog_version="$new_upstream_version-$new_revision"
      else
         new_changelog_version="$make_epoch:$new_upstream_version-$new_revision"
      fi
   elif [ "$make_bump_type" = "manual" ]; then
      echo "Current version number: $make_changelog_version"
      echo "Please enter new version number!"
      read new_changelog_version
   else
      true "make_bump_type $make_bump_type is neither major nor manual!"
   fi

   true "\
Bumping version from / to...
$make_changelog_version
$new_changelog_version"

   if echo "$new_changelog_version" | grep --quiet "error" ; then
      echo "$0: ${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') Failed!" >&2
      exit 1
   fi

   [ -n "$DEBCHANGE_MSG" ] || DEBCHANGE_MSG="New upstream version (local package)."

   debchange \
      --newversion "$new_changelog_version" \
      "$DEBCHANGE_MSG"

   debchange \
      --release \
      ""
}

make_deb-uachl-bumpup-manual() {
   make_function_run make_uch
   make_function_run make_deb-chl-bumpup-manual
}

make_deb-uachl-bumpup-major() {
   make_function_run make_uch
   make_function_run make_deb-chl-bumpup-major
}

make_git_tag_shared() {
   if [ "$make_git_tag_shared_done" = "true" ]; then
      return 0
   fi
   [ -n "$make_git_tag_push_targets" ] || make_git_tag_push_targets="origin"
   command -v git >/dev/null
   make_git_tag_shared_done="true"
}

make_git_tag_show() {
   make_function_run make_git_tag_shared
   echo "$make_pkg_version_with_revision"
}

make_git_tag_sign() {
   make_function_run make_git_tag_shared
   git tag -s "$make_pkg_version_with_revision" -m "."
   make_function_run make_git_tag_verify
}

make_git_tag_verify() {
   make_function_run make_git_tag_shared
   git tag -v "$make_pkg_version_with_revision"
}

make_git_tag_check() {
   make_function_run make_git_tag_shared
   local make_git_describe_output
   make_git_describe_output="$(git describe --always --abbrev=1000000000)"
   if [ ! "$make_pkg_version_with_revision" = "$make_git_describe_output" ]; then
      echo "$0: ${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') Failed! Current git head a unsigned git tag! $running_as_root_maybe \
make_pkg_version_with_revision $make_pkg_version_with_revision differs from make_git_describe_output $make_git_describe_output" >&2
      exit 1
   fi
   make_function_run make_git_tag_verify
   echo "$0: ${green}INFO:${reset} Ok, current git head is a signed git tag."
}

make_git_commit_verify() {
   git verify-commit "$1"
}

make_git_commit_verify_current() {
   make_function_run make_git_tag_shared
   local make_git_commit_verify_return_code="0"
   make_function_run make_git_commit_verify "HEAD" || { make_git_commit_verify_return_code="$?" ; true; };
   if [ ! "$make_git_commit_verify_return_code" = "0" ]; then
      echo "$0: ${red}${bold}ERROR:${reset} (FUNCNAME: '$FUNCNAME') Failed! Current git head commit is unsigned! $running_as_root_maybe" >&2
      exit 1
   fi
   echo "$0: ${green}INFO:${reset} Ok, current git head commit is signed."
}

make_git_verify() {
   make_function_run make_git_commit_verify_current
   make_function_run make_git_tag_check
   echo "$0: ${green}INFO:${reset} Ok, current git head is a signed git commit and a signed git tag."
}

make_git_tag_push() {
   make_function_run make_git_tag_shared
   local repository
   for repository in $make_git_tag_push_targets; do
      echo "git push $repository $make_pkg_version_with_revision"
      git push "$repository" "$make_pkg_version_with_revision"
   done
}

make_git_tag_show_latest() {
   make_function_run make_git_tag_shared
   ## Thanks to kilianc - http://stackoverflow.com/a/7979255/2605155
   make_git_tag_latest="$(git describe --tags $(git rev-list --tags --max-count=1))"
   echo "$make_git_tag_latest"
}

make_git_tag_push_latest() {
   make_function_run make_git_tag_shared
   ## Thanks to kilianc - http://stackoverflow.com/a/7979255/2605155
   make_git_tag_latest="$(git describe --tags $(git rev-list --tags --max-count=1))"
   local repository
   for repository in $make_git_tag_push_targets; do
      echo "git push $repository $make_git_tag_latest"
      git push "$repository" "$make_git_tag_latest"
   done
}

make_reprepro-shared() {
   local package package_absolute_path $make_reprepro_codename codename

   if [ "$make_reprepro_codename" = "" ]; then
      if [ "$WHONIX_BUILD_APT_CODENAME" = "" ]; then
         make_reprepro_codename="local"
      else
         make_reprepro_codename="$WHONIX_BUILD_APT_CODENAME"
      fi
   fi
   if [ -x "../whonix-developer-meta-files/debug-steps/reprepro-wrapper" ]; then
      make_reprepro_wrapper="../whonix-developer-meta-files/debug-steps/reprepro-wrapper"
   else
      make_reprepro_wrapper="reprepro"
   fi

   if [ "$make_reprepro_codename" = "local" ]; then
      make_reprepro_list_codename="local"
   else
      make_reprepro_list_codename="local $make_reprepro_codename"
   fi

   for codename in $make_reprepro_list_codename; do
      reprepro_codename="$codename"
      export reprepro_codename
      if [ "$make_reprepro_cmd" = "add" ]; then
         changes_file_absolute_path="$(readlink -f "$make_main_changes_file")"
         test -f "$changes_file_absolute_path"
         $make_reprepro_wrapper --ignore=wrongdistribution include "$codename" "$changes_file_absolute_path"
      else
         for package in $make_package_list; do
            $make_reprepro_wrapper remove "$codename" "$package"
            $make_reprepro_wrapper removesrc "$codename" "$package"
         done
      fi
   done
}

make_reprepro-add() {
   make_reprepro_cmd=add
   make_reprepro-shared
}

make_reprepro-remove() {
   make_reprepro_cmd=remove
   make_reprepro-shared
}

make_source_overrides_file() {
   if [ -x "./make-helper-overrides.bsh" ]; then
      bash -n "./make-helper-overrides.bsh"
      source "./make-helper-overrides.bsh"
   fi
   if [ -x "./debian/make-helper-overrides.bsh" ]; then
      bash -n "./debian/make-helper-overrides.bsh"
      source "./debian/make-helper-overrides.bsh"
   fi
}

make_source_overrides_folder() {
   local folder_name
   for folder_name in ./make-helper-overrides.d ./debian/make-helper-overrides.d ; do
      if [ -d "$folder_name" ]; then
         local i
         for i in "$folder_name"*; do
            if [ -x "$i" ]; then
               ## If the last character is a ~, ignore that file,
               ## because it was created by some editor,
               ## which creates backup files.
               if [ "${i: -1}" = "~" ]; then
                  continue
               fi
               ## Skipping files such as .dpkg-old and .dpkg-dist.
               if ( echo "$i" | grep -q ".dpkg-" ); then
                  true "skip $i"
                  continue
               fi
               bash -n "$i"
               source "$i"
            fi
         done
      fi
   done
}

make_function_run() {
   local function_name function_name_return_code
   function_name="$1"
   shift
   if type -t "${function_name}_hook_pre" >/dev/null ; then
      "${function_name}_hook_pre" "$@"
   fi
   if true ; then
      "$function_name" "$@"
      function_name_return_code="$?"
      if [ ! "$function_name_return_code" = "0" ]; then
         true "${green}INFO:${reset} function_name_return_code: $function_name_return_code"
         return "$function_name_return_code"
      fi
   fi
   if type -t "${function_name}_hook_post" >/dev/null ; then
      "${function_name}_hook_post" "$@"
   fi
}

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
   make_script_was_sourced="true"
else
   make_script_was_sourced="false"
fi

if [ "$make_script_was_sourced" = "false" ]; then
   if [ -f /usr/lib/helper-scripts/pre.bsh ]; then
      ## pre.bsh would `source` the following folders:
      ## /etc/make-helper-one.bsh_pre.d/*.conf
      ## /usr/local/etc/make-helper-one.bsh_pre.d/*.conf
      source /usr/lib/helper-scripts/pre.bsh
      true
   fi

   temp="$@"
   if [ "$temp" = "" ]; then
      echo "$0: ${green}INFO:${reset} called without parameters."
   else
      echo "$0: ${green}INFO:${reset} $@"
   fi

   set -e
   set -o pipefail

   make_function_run make_init

   make_function_run make_source_overrides_file "$@"
   make_function_run make_source_overrides_folder "$@"

   make_function_run make_parse_cmd "$@"

   make_function_run make_deinit
fi
